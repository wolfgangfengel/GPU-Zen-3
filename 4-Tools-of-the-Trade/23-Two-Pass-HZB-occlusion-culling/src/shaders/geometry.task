#version 460

#extension GL_EXT_control_flow_attributes: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_mesh_shader: require
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_KHR_shader_subgroup_vote: require

#include "shader_common.h"

layout(local_size_x = kShaderGroupSize) in;

layout(binding = 0) uniform UniformBufferObject { PerFrameData perFrameData; };
layout(binding = 1) readonly buffer PerDrawDataVector { PerDrawData perDrawDataVector[]; };
layout(binding = 2) readonly buffer DrawCommands { DrawCommand drawCommands[]; };
layout(binding = 3) readonly buffer Meshlets { Meshlet meshlets[]; };
layout(binding = 4) readonly buffer Meshes { Mesh meshes[]; };
layout(binding = 8) buffer MeshletVisibility { uint meshletVisibility[]; };
layout(binding = 9) uniform sampler2D hzb;

layout (push_constant) uniform block
{
    PerPassData perPassData;
};

taskPayloadSharedEXT uint meshletIndices[kShaderGroupSize];

void main()
{
	uint drawIndex = drawCommands[gl_DrawID].drawIndex;
	PerDrawData perDrawData = perDrawDataVector[drawIndex];
	
	Mesh mesh = meshes[perDrawData.meshIndex];
	
	uint lodIndex = drawCommands[gl_DrawID].lodIndex;
	MeshLod meshLod = mesh.lods[lodIndex];

	uint groupThreadIndex = gl_LocalInvocationID.x;
	uint localMeshletIndex = gl_GlobalInvocationID.x;
	uint meshletIndex = meshLod.meshletOffset + localMeshletIndex;
	
	if (localMeshletIndex >= meshLod.meshletCount)
	{
		return;
	}
	
	bool bPrepass = perPassData.bPrepass == 1;

	vec3 center = (perDrawData.model * vec4(
		meshlets[meshletIndex].center[0],
		meshlets[meshletIndex].center[1],
		meshlets[meshletIndex].center[2], 1.0)).xyz;
	
	// TODO-MILKRU: Multiply meshlet bounding spheres by scale.
	// float scaledRadius = scale meshlets[meshletIndex].radius

	vec3 coneAxis = (perDrawData.model * vec4(
		int(meshlets[meshletIndex].coneAxis[0]) / 127.0,
		int(meshlets[meshletIndex].coneAxis[1]) / 127.0,
		int(meshlets[meshletIndex].coneAxis[2]) / 127.0, 0.0)).xyz;

	vec3 cameraPosition = perFrameData.freezeCameraPosition.xyz;
	float coneCutoff = int(meshlets[meshletIndex].coneCutoff) / 127.0;
	
	uint meshletVisibilityIndex = perDrawData.meshletVisibilityOffset + localMeshletIndex;

	// Bit packing, where 32 referes to uint bits
	bool bPreviousVisibility = ((meshletVisibility[meshletVisibilityIndex / 32] >> (meshletVisibilityIndex % 32)) & 1u) == 1u;
	bPreviousVisibility = bPreviousVisibility && drawCommands[gl_DrawID].meshVisibility == 1; // Newly visible meshes might have stale meshlet visibility bits

	bool bOcclusionCullingEnabled = perFrameData.bMeshletOcclusionCullingEnabled == 1;
	bool bVisible = bPrepass && bOcclusionCullingEnabled ? bPreviousVisibility : true;
	
	bool bConeCullingEnabled = perFrameData.bMeshletConeCullingEnabled == 1;
	if (bVisible && bConeCullingEnabled)
	{
		bool bConeCulled = dot(normalize(center - cameraPosition), coneAxis) >= coneCutoff;
		bVisible = !bConeCulled;
	}
	
	bool bFrustumCullingEnabled = perFrameData.bMeshletFrustumCullingEnabled == 1;
	if (bVisible && bFrustumCullingEnabled)
	{
		bool bFrustumCulled = false;

		[[unroll]]
		for(int i = 0; i < kFrustumPlaneCount; ++i)
		{
			bFrustumCulled = bFrustumCulled ||
				dot(vec4(center, 1.0), perFrameData.freezeFrustumPlanes[i]) + meshlets[meshletIndex].radius < 0.0;
		}

		bVisible = !bFrustumCulled;
	}

	if (!bPrepass)
	{
		if (bVisible && bOcclusionCullingEnabled)
		{
			vec3 centerViewSpace = (perFrameData.freezeView * vec4(center, 1.0)).xyz;
			float P00 = perFrameData.projection[0][0];
			float P11 = perFrameData.projection[1][1];
			float zNear = perFrameData.projection[3][2];
			vec4 AABB;

			if (tryCalculateSphereBounds(centerViewSpace, meshlets[meshletIndex].radius, zNear, P00, P11, AABB))
			{
				float boundsWidth = (AABB.z - AABB.x) * float(perFrameData.hzbSize);
				float boundsHeight = (AABB.w - AABB.y) * float(perFrameData.hzbSize);
				float mipIndex = floor(log2(max(boundsWidth, boundsHeight)));

				float occluderDepth = textureLod(hzb, 0.5 * (AABB.xy + AABB.zw), mipIndex).x;
				float nearestBoundsDepth = zNear / (-centerViewSpace.z - meshlets[meshletIndex].radius);

				bool bOcclusionCulled = occluderDepth >= nearestBoundsDepth;
				bVisible = bVisible && !bOcclusionCulled;
			}
		}
	}
	
	// TODO-MILKRU: Try ballot with group shared memory optimisation
	if (!bPrepass && bOcclusionCullingEnabled)
	{
		// Bit packing, where 32 referes to uint bits
		if (bVisible)
		{
			atomicOr(meshletVisibility[meshletVisibilityIndex / 32], 1u << meshletVisibilityIndex % 32);
		}
		else
		{
			atomicAnd(meshletVisibility[meshletVisibilityIndex / 32], ~(1u << meshletVisibilityIndex % 32));
		}
	}
	
	bool bDrawMeshlet = bPrepass || !bOcclusionCullingEnabled ? bVisible : bVisible && !bPreviousVisibility;
	uvec4 drawMeshletBallot = subgroupBallot(bDrawMeshlet);
	
	if (bDrawMeshlet)
	{
		uint subgroupLocalMeshletIndex = subgroupBallotExclusiveBitCount(drawMeshletBallot);
		meshletIndices[subgroupLocalMeshletIndex] = meshletIndex;
	}
	
	uint drawnMeshletCount = subgroupBallotBitCount(drawMeshletBallot);
	EmitMeshTasksEXT(drawnMeshletCount, 1, 1);
}
